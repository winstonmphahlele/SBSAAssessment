openapi: 3.0.1
info:
  title: User and Product API
  description: API for managing users and products with authentication.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080/backend/api  # Change this to your server URL

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: admin
        password:
          type: string
          minLength: 6
          example: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid username or password

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com

    UpdateUserRequest:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 3
          maxLength: 30
          example: Jane Doe
        email:
          type: string
          format: email
          example: jane@example.com

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string

    CreateProductRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
          example: Sample Product
        price:
          type: number
          format: double
          minimum: 0
          example: 29.99

    UpdateProductRequest:
      type: object
      required:
        - id
        - price
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 2
          maxLength: 30
          example: Updated Product Name
        price:
          type: number
          format: double
          minimum: 0
          example: 39.99

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: double

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Auth
    description: Basic user login to get JWT token.
  - name: User
    description: User CRUD operations, delete user requires JWT from Login first.
  - name: Product
    description: Product CRUD operations.

paths:
  # Auth
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Users
  /users:
    post:
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

    put:
      summary: Update an existing user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a user
      description: Deletes a user. Requires JWT token in the authorization header.
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user to retrieve
        schema:
          type: integer
    get:
      summary: Get user by ID
      tags:
        - User
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Products
  /products:
    post:
      summary: Create a new product
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

    get:
      summary: Get all products
      tags:
        - Product
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

    put:
      summary: Update an existing product
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product
      tags:
        - Product
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
